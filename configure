#!/usr/bin/python3

import os

from sys import argv
argc: int = len(argv)

DEBUG_FILES: list[str] = ["include/debug.hpp", "scheme/debug.scm"]
CPP_CONF_TEMPL: str = """/* THIS FILE WAS GENERATED
BY ./configure, DO NOT MODIFY. */
#pragma once

"""
MK_CONF_TEMPL: str = """# THIS FILE WAS GENERATED
# BY ./configure, DO NOT MODIFY.

CC     = g++
CFLAGS = -I./include

"""

# Exclusion macros
DEBUG_EXCLUDE:  str = "#define DEBUG_EXCLUDE"
STDLIB_EXCLUDE: str = "#define STDLIB_EXCLUDE"

EXCLUDE_ALL = "\n".join(
    [DEBUG_EXCLUDE, STDLIB_EXCLUDE])

# Initialize debug
def dbg_init() -> None:
    for file in DEBUG_FILES:
        with open(file, "w+") as f:
            f.close()

def conf_exclude(exclude: str) -> str:
    match exclude:
        case "debug":
            return DEBUG_EXCLUDE
        case "std":
            return STDLIB_EXCLUDE
        case "all":
            return EXCLUDE_ALL
        case _:
            print("Invalid exclusion.")
            return ""

def cpp_confinit() -> None:
    conf: str = CPP_CONF_TEMPL
    for flag in argv:
        match flag:
            case "--exclude":
                conf += (conf_exclude(argv[argv.index(flag)+1]) + "\n")
            case "--repl":
                conf += "#define ONLY_REPL\n"
    with open("include/config.hpp", "w") as f:
        f.write(conf)
        
def mk_confinit() -> None:
    conf: str = MK_CONF_TEMPL
    for flag in argv:
        match flag:
            case "--clang":
                conf += "CC = clang\n"
            case "--cflags":
                conf += "CFLAGS = " + argv[argv.index(flag)+1] + "\n"
    with open("config.mk", "w") as f:
        f.write(conf)

def main() -> None:
    dbg_init()
    cpp_confinit()
    mk_confinit()

if __name__ == "__main__":
    main()
